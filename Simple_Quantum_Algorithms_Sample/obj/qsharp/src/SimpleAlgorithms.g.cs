//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"ParityViaFourierSampling\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":51,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Uf\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":36},\"Item2\":{\"Line\":1,\"Column\":38}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"n\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":69},\"Item2\":{\"Line\":1,\"Column\":70}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Bool\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" ParityViaFourierSampling implements the Bernstein-Vazirani quantum algorithm.\",\" This algorithm computes for a given Boolean function that is promised to be\",\" a parity 𝑓(𝑥₀, …, 𝑥ₙ₋₁) = Σᵢ 𝑟ᵢ 𝑥ᵢ a result in form of\",\" a bit vector (𝑟₀, …, 𝑟ₙ₋₁) corresponding to the parity function.\",\" Note that it is promised that the function is actually a parity function.\",\"\",\" # Input\",\" ## Uf\",\" A quantum operation that implements |𝑥〉|𝑦〉 ↦ |𝑥〉|𝑦 ⊕ 𝑓(𝑥)〉,\",\" where 𝑓 is a Boolean function that implements a parity Σᵢ 𝑟ᵢ 𝑥ᵢ.\",\" ## n\",\" The number of bits of the input register |𝑥〉.\",\"\",\" # Output\",\" An array of type `Bool[]` that contains the parity 𝑟⃗ = (𝑟₀, …, 𝑟ₙ₋₁).\",\"\",\" # See Also\",\" - For details see Section 1.4.3 of Nielsen & Chuang.\",\"\",\" # References\",\" - [ *Ethan Bernstein and Umesh Vazirani*,\",\"     SIAM J. Comput., 26(5), 1411–1473, 1997 ](https://doi.org/10.1137/S0097539796300921)\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"ParityViaFourierSampling\"},\"Attributes\":[],\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":51,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"_ParityOperation\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":106,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"pattern\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Bool\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":28},\"Item2\":{\"Line\":1,\"Column\":35}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"queryRegister\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":46},\"Item2\":{\"Line\":1,\"Column\":59}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":71},\"Item2\":{\"Line\":1,\"Column\":77}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Bool\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"_ParityOperation\"},\"Attributes\":[],\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":106,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"ParityOperation\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":132,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":25}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"pattern\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Bool\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":26},\"Item2\":{\"Line\":1,\"Column\":33}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Bool\"}]},\"ReturnType\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Given a bitstring 𝑟⃗ = (r₀, …, rₙ₋₁), returns an operation implementing\",\" a unitary 𝑈 that acts on 𝑛 + 1 qubits as\",\"\",\"       𝑈 |𝑥〉|𝑦〉 = |𝑥〉|𝑦 ⊕ 𝑓(𝑥)〉,\",\" where 𝑓(𝑥) = Σᵢ 𝑥ᵢ 𝑟ᵢ mod 2.\",\"\",\" # Input\",\" ## pattern\",\" The bitstring 𝑟⃗ used to define the function 𝑓.\",\"\",\" # Output\",\" An operation implementing 𝑈.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"ParityOperation\"},\"Attributes\":[],\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":132,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":25}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"BernsteinVaziraniTestCase\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":141,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":36}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nQubits\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":38},\"Item2\":{\"Line\":1,\"Column\":45}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"patternInt\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":53},\"Item2\":{\"Line\":1,\"Column\":63}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"BernsteinVaziraniTestCase\"},\"Attributes\":[],\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":141,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":36}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"IsConstantBooleanFunction\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":177,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":36}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Uf\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":38},\"Item2\":{\"Line\":1,\"Column\":40}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"n\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":71},\"Item2\":{\"Line\":1,\"Column\":72}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Bool\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Deutsch–Jozsa is a quantum algorithm that decides whether a given Boolean function\",\" 𝑓 that is promised to either be constant or to be balanced — i.e., taking the\",\" values 0 and 1 the exact same number of times — is actually constant or balanced.\",\" The operation `IsConstantBooleanFunction` answers this question by returning the\",\" Boolean value `true` if the function is constant and `false` if it is not. Note\",\" that the promise that the function is either constant or balanced is assumed.\",\"\",\" # Input\",\" ## Uf\",\" A quantum operation that implements |𝑥〉|𝑦〉 ↦ |𝑥〉|𝑦 ⊕ 𝑓(𝑥)〉,\",\" where 𝑓 is a Boolean function, 𝑥 is an 𝑛 bit register and 𝑦 is a single qubit.\",\" ## n\",\" The number of bits of the input register |𝑥〉.\",\"\",\" # Output\",\" A boolean value `true` that indicates that the function is constant and `false`\",\" that indicates that the function is balanced.\",\"\",\" # See Also\",\" - For details see Section 1.4.3 of Nielsen & Chuang.\",\"\",\" # References\",\" - [ *Michael A. Nielsen , Isaac L. Chuang*,\",\"     Quantum Computation and Quantum Information ](http://doi.org/10.1017/CBO9780511976667)\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"IsConstantBooleanFunction\"},\"Attributes\":[],\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":177,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":36}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"_BooleanFunctionFromMarkedElements\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":222,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":45}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"n\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":46},\"Item2\":{\"Line\":1,\"Column\":47}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"markedElements\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":55},\"Item2\":{\"Line\":1,\"Column\":69}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"query\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":79},\"Item2\":{\"Line\":1,\"Column\":84}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":96},\"Item2\":{\"Line\":1,\"Column\":102}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"_BooleanFunctionFromMarkedElements\"},\"Attributes\":[],\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":222,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":45}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"BooleanFunctionFromMarkedElements\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":254,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":43}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nQubits\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":45},\"Item2\":{\"Line\":1,\"Column\":52}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"markedElements\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":60},\"Item2\":{\"Line\":1,\"Column\":74}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]}]]},\"ReturnType\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Constructs an operation representing a query to a boolean function\",\" 𝑓(𝑥⃗) for a bitstring 𝑥⃗, such that 𝑓(𝑥⃗) = 1 if and only if the integer\",\" 𝑘 represented by 𝑥⃗ is an element of a given array.\",\"\",\" # Input\",\" ## nQubits\",\" The number of qubits to be used in representing the query operation.\",\" ## markedElements\",\" An array of the elements {𝑘ᵢ} for which 𝑓 should return 1.\",\"\",\" # Output\",\" An operation representing the unitary 𝑈 |𝑧〉 |𝑘〉 = |𝑧 ⊕ 𝑥ₖ〉 |𝑘〉.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"BooleanFunctionFromMarkedElements\"},\"Attributes\":[],\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":254,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":43}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"DeutschJozsaTestCase\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":259,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nQubits\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":32},\"Item2\":{\"Line\":1,\"Column\":39}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"markedElements\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":47},\"Item2\":{\"Line\":1,\"Column\":61}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]}]]},\"ReturnType\":{\"Case\":\"Bool\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"DeutschJozsaTestCase\"},\"Attributes\":[],\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":259,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"HiddenShiftBentCorrelation\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":317,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":37}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Ufstar\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":39},\"Item2\":{\"Line\":1,\"Column\":45}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Ug\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":67},\"Item2\":{\"Line\":1,\"Column\":69}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"n\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":91},\"Item2\":{\"Line\":1,\"Column\":92}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Bool\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Correlation-based algorithm to solve the hidden shift problem for bent functions.\",\" The problem is to identify an unknown shift 𝑠 of the arguments of two Boolean functions\",\" 𝑓 and 𝑔 that are promised to satisfy the relation 𝑔(𝑥) = 𝑓(𝑥 ⊕ 𝑠) for all 𝑥.\",\" Note that the promise about the functions 𝑓 and 𝑔 to be bent functions is assumed,\",\" i.e., they both have a flat Fourier (Walsh–Hadamard) spectra. Input to this algorithm\",\" are implementations 𝑈_g of the Boolean function 𝑔 and 𝑈_f^*, an implementation of\",\" dual bent function of the function 𝑓. Both functions are given via phase encoding.\",\"\",\" # Input\",\" ## Ufstar\",\" A quantum operation that implements $U_f^*:\\\\ket{x}\\\\mapsto (-1)^{f^*(x)} \\\\ket{x}$,\",\" where $f^*$ is a Boolean function, $x$ is an $n$ bit register and $y$ is a single qubit.\",\" ## Ug\",\" A quantum operation that implements $U_g:\\\\ket{x}\\\\mapsto (-1)^{g(x)} \\\\ket{x}$,\",\" where $g$ is a Boolean function that is shifted by unknown $s$ from $f$, and $x$ is\",\" an $n$ bit register.\",\" ## n\",\" The number of bits of the input register |𝑥〉.\",\"\",\" # Output\",\" An array of type `Bool[]` which encodes the bit representation of the hidden shift.\",\"\",\" # References\",\" - [*Martin Roetteler*,\",\"    Proc. SODA 2010, ACM, pp. 448-457, 2010](https://doi.org/10.1137/1.9781611973075.37)\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"HiddenShiftBentCorrelation\"},\"Attributes\":[],\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":317,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":37}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"InnerProductBentFunctionImpl\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":376,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":39}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"u\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":41},\"Item2\":{\"Line\":1,\"Column\":42}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"qs\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":50},\"Item2\":{\"Line\":1,\"Column\":52}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"InnerProductBentFunctionImpl\"},\"Attributes\":[],\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":376,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":39}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"InnerProductBentFunction\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":393,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":34}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"u\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":35},\"Item2\":{\"Line\":1,\"Column\":36}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Int\"},\"ReturnType\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"InnerProductBentFunction\"},\"Attributes\":[],\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":393,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":34}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"_ShiftedInnerProductBentFunction\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":406,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":43}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"shift\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Bool\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":44},\"Item2\":{\"Line\":1,\"Column\":49}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"u\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":60},\"Item2\":{\"Line\":1,\"Column\":61}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"qs\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":69},\"Item2\":{\"Line\":1,\"Column\":71}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Bool\"}]},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"_ShiftedInnerProductBentFunction\"},\"Attributes\":[],\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":406,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":43}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"ShiftedInnerProductBentFunction\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":431,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":41}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"shift\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Bool\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":42},\"Item2\":{\"Line\":1,\"Column\":47}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"u\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":58},\"Item2\":{\"Line\":1,\"Column\":59}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Bool\"}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"ShiftedInnerProductBentFunction\"},\"Attributes\":[],\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":431,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":41}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"HiddenShiftBentCorrelationTestCase\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":437,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":45}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"patternInt\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":47},\"Item2\":{\"Line\":1,\"Column\":57}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"u\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":65},\"Item2\":{\"Line\":1,\"Column\":66}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.SimpleAlgorithms\",\"Name\":\"HiddenShiftBentCorrelationTestCase\"},\"Attributes\":[],\"SourceFile\":\"C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs\",\"Position\":{\"Item1\":437,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":45}},\"Documentation\":[]}")]
#line hidden
namespace Microsoft.Quantum.Samples.SimpleAlgorithms
{
    [SourceLocation("C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs", OperationFunctor.Body, 52, 107)]
    public partial class ParityViaFourierSampling : Operation<(ICallable,Int64), IQArray<Boolean>>, ICallable
    {
        public ParityViaFourierSampling(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(ICallable,Int64)>, IApplyData
        {
            public In((ICallable,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item1)?.Qubits;
                }
            }
        }

        String ICallable.Name => "ParityViaFourierSampling";
        String ICallable.FullName => "Microsoft.Quantum.Samples.SimpleAlgorithms.ParityViaFourierSampling";
        public static OperationInfo<(ICallable,Int64), IQArray<Boolean>> Info => new OperationInfo<(ICallable,Int64), IQArray<Boolean>>(typeof(ParityViaFourierSampling));
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IAdjointable MicrosoftQuantumCanonApplyToEachA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumArraysForEach
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> MicrosoftQuantumMeasurementMResetZ
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> MicrosoftQuantumIntrinsicMessage
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> MicrosoftQuantumIntrinsicReset
        {
            get;
            set;
        }

        protected ICallable<IQArray<Result>, IQArray<Boolean>> MicrosoftQuantumConvertResultArrayAsBoolArray
        {
            get;
            set;
        }

        public override Func<(ICallable,Int64), IQArray<Boolean>> Body => (__in__) =>
        {
            var (Uf,n) = __in__;
#line hidden
            {
#line 55 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                var (queryRegister,target) = (Allocate.Apply(n), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 58 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    MicrosoftQuantumIntrinsicX.Apply(target);
#line 67 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicH, queryRegister));
#line 69 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    MicrosoftQuantumIntrinsicH.Apply(target);
#line 71 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    Uf.Apply((queryRegister, target));
#line 52 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    MicrosoftQuantumCanonApplyToEachA.Adjoint.Apply((MicrosoftQuantumIntrinsicH, queryRegister));
#line 77 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    var resultArray = (IQArray<Result>)MicrosoftQuantumArraysForEach.Apply<IQArray<Result>>((MicrosoftQuantumMeasurementMResetZ, queryRegister));
#line 81 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    MicrosoftQuantumIntrinsicMessage.Apply(String.Format("measured: {0}", resultArray));
#line 84 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    MicrosoftQuantumIntrinsicReset.Apply(target);
#line 85 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    return MicrosoftQuantumConvertResultArrayAsBoolArray.Apply(resultArray);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(queryRegister);
#line hidden
                        Release.Apply(target);
                    }
                }
            }
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.MicrosoftQuantumCanonApplyToEachA = this.Factory.Get<IAdjointable>(typeof(Microsoft.Quantum.Canon.ApplyToEachA<>));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.MicrosoftQuantumArraysForEach = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.ForEach<,>));
            this.MicrosoftQuantumMeasurementMResetZ = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Measurement.MResetZ));
            this.MicrosoftQuantumIntrinsicMessage = this.Factory.Get<ICallable<String, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Message));
            this.MicrosoftQuantumIntrinsicReset = this.Factory.Get<ICallable<Qubit, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Reset));
            this.MicrosoftQuantumConvertResultArrayAsBoolArray = this.Factory.Get<ICallable<IQArray<Result>, IQArray<Boolean>>>(typeof(Microsoft.Quantum.Convert.ResultArrayAsBoolArray));
        }

        public override IApplyData __dataIn((ICallable,Int64) data) => new In(data);
        public override IApplyData __dataOut(IQArray<Boolean> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Boolean>> Run(IOperationFactory __m__, ICallable Uf, Int64 n)
        {
            return __m__.Run<ParityViaFourierSampling, (ICallable,Int64), IQArray<Boolean>>((Uf, n));
        }
    }

    [SourceLocation("C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs", OperationFunctor.Body, 107, 133)]
    public partial class _ParityOperation : Operation<(IQArray<Boolean>,IQArray<Qubit>,Qubit), QVoid>, ICallable
    {
        public _ParityOperation(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Boolean>,IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((IQArray<Boolean>,IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "_ParityOperation";
        String ICallable.FullName => "Microsoft.Quantum.Samples.SimpleAlgorithms._ParityOperation";
        public static OperationInfo<(IQArray<Boolean>,IQArray<Qubit>,Qubit), QVoid> Info => new OperationInfo<(IQArray<Boolean>,IQArray<Qubit>,Qubit), QVoid>(typeof(_ParityOperation));
        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumArraysZip
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        public override Func<(IQArray<Boolean>,IQArray<Qubit>,Qubit), QVoid> Body => (__in__) =>
        {
            var (pattern,queryRegister,target) = __in__;
#line 108 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            if ((queryRegister.Length != pattern.Length))
            {
#line 109 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                throw new ExecutionFailException("Length of input register must be equal to the pattern length.");
            }

#line 112 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            foreach (var (patternBit,controlQubit) in MicrosoftQuantumArraysZip.Apply<IQArray<(Boolean,Qubit)>>((pattern, queryRegister)))
#line hidden
            {
#line 113 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                if (patternBit)
                {
#line 114 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    MicrosoftQuantumIntrinsicX.Controlled.Apply((new QArray<Qubit>(controlQubit), target));
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumArraysZip = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Zip<,>));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __dataIn((IQArray<Boolean>,IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Boolean> pattern, IQArray<Qubit> queryRegister, Qubit target)
        {
            return __m__.Run<_ParityOperation, (IQArray<Boolean>,IQArray<Qubit>,Qubit), QVoid>((pattern, queryRegister, target));
        }
    }

    [SourceLocation("C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs", OperationFunctor.Body, 133, 142)]
    public partial class ParityOperation : Function<IQArray<Boolean>, ICallable>, ICallable
    {
        public ParityOperation(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "ParityOperation";
        String ICallable.FullName => "Microsoft.Quantum.Samples.SimpleAlgorithms.ParityOperation";
        public static OperationInfo<IQArray<Boolean>, ICallable> Info => new OperationInfo<IQArray<Boolean>, ICallable>(typeof(ParityOperation));
        protected ICallable<(IQArray<Boolean>,IQArray<Qubit>,Qubit), QVoid> _ParityOperation
        {
            get;
            set;
        }

        public override Func<IQArray<Boolean>, ICallable> Body => (__in__) =>
        {
            var pattern = __in__;
#line 134 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            return _ParityOperation.Partial(new Func<(IQArray<Qubit>,Qubit), (IQArray<Boolean>,IQArray<Qubit>,Qubit)>((__arg1__) => (pattern, __arg1__.Item1, __arg1__.Item2)));
        }

        ;
        public override void Init()
        {
            this._ParityOperation = this.Factory.Get<ICallable<(IQArray<Boolean>,IQArray<Qubit>,Qubit), QVoid>>(typeof(_ParityOperation));
        }

        public override IApplyData __dataIn(IQArray<Boolean> data) => data;
        public override IApplyData __dataOut(ICallable data) => new QTuple<ICallable>(data);
        public static System.Threading.Tasks.Task<ICallable> Run(IOperationFactory __m__, IQArray<Boolean> pattern)
        {
            return __m__.Run<ParityOperation, IQArray<Boolean>, ICallable>(pattern);
        }
    }

    [SourceLocation("C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs", OperationFunctor.Body, 142, 178)]
    public partial class BernsteinVaziraniTestCase : Operation<(Int64,Int64), Int64>, ICallable
    {
        public BernsteinVaziraniTestCase(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "BernsteinVaziraniTestCase";
        String ICallable.FullName => "Microsoft.Quantum.Samples.SimpleAlgorithms.BernsteinVaziraniTestCase";
        public static OperationInfo<(Int64,Int64), Int64> Info => new OperationInfo<(Int64,Int64), Int64>(typeof(BernsteinVaziraniTestCase));
        protected ICallable<(Int64,Int64), IQArray<Boolean>> MicrosoftQuantumConvertIntAsBoolArray
        {
            get;
            set;
        }

        protected ICallable<(ICallable,Int64), IQArray<Boolean>> ParityViaFourierSampling
        {
            get;
            set;
        }

        protected ICallable<IQArray<Boolean>, ICallable> ParityOperation
        {
            get;
            set;
        }

        protected ICallable<IQArray<Boolean>, Int64> MicrosoftQuantumConvertBoolArrayAsInt
        {
            get;
            set;
        }

        public override Func<(Int64,Int64), Int64> Body => (__in__) =>
        {
            var (nQubits,patternInt) = __in__;
#line 143 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            var pattern = (IQArray<Boolean>)MicrosoftQuantumConvertIntAsBoolArray.Apply((patternInt, nQubits));
#line 144 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            var result = (IQArray<Boolean>)ParityViaFourierSampling.Apply((ParityOperation.Apply(pattern), nQubits));
#line 145 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            return MicrosoftQuantumConvertBoolArrayAsInt.Apply(result);
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumConvertIntAsBoolArray = this.Factory.Get<ICallable<(Int64,Int64), IQArray<Boolean>>>(typeof(Microsoft.Quantum.Convert.IntAsBoolArray));
            this.ParityViaFourierSampling = this.Factory.Get<ICallable<(ICallable,Int64), IQArray<Boolean>>>(typeof(ParityViaFourierSampling));
            this.ParityOperation = this.Factory.Get<ICallable<IQArray<Boolean>, ICallable>>(typeof(ParityOperation));
            this.MicrosoftQuantumConvertBoolArrayAsInt = this.Factory.Get<ICallable<IQArray<Boolean>, Int64>>(typeof(Microsoft.Quantum.Convert.BoolArrayAsInt));
        }

        public override IApplyData __dataIn((Int64,Int64) data) => new In(data);
        public override IApplyData __dataOut(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 nQubits, Int64 patternInt)
        {
            return __m__.Run<BernsteinVaziraniTestCase, (Int64,Int64), Int64>((nQubits, patternInt));
        }
    }

    [SourceLocation("C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs", OperationFunctor.Body, 178, 223)]
    public partial class IsConstantBooleanFunction : Operation<(ICallable,Int64), Boolean>, ICallable
    {
        public IsConstantBooleanFunction(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(ICallable,Int64)>, IApplyData
        {
            public In((ICallable,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item1)?.Qubits;
                }
            }
        }

        String ICallable.Name => "IsConstantBooleanFunction";
        String ICallable.FullName => "Microsoft.Quantum.Samples.SimpleAlgorithms.IsConstantBooleanFunction";
        public static OperationInfo<(ICallable,Int64), Boolean> Info => new OperationInfo<(ICallable,Int64), Boolean>(typeof(IsConstantBooleanFunction));
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected IAdjointable MicrosoftQuantumCanonApplyToEachA
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumArraysForEach
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> MicrosoftQuantumMeasurementMResetZ
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> MicrosoftQuantumIntrinsicReset
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumArraysAll
        {
            get;
            set;
        }

        protected ICallable<Result, Boolean> MicrosoftQuantumCanonIsResultZero
        {
            get;
            set;
        }

        public override Func<(ICallable,Int64), Boolean> Body => (__in__) =>
        {
            var (Uf,n) = __in__;
#line hidden
            {
#line 181 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                var (queryRegister,target) = (Allocate.Apply(n), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 184 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    MicrosoftQuantumIntrinsicX.Apply(target);
#line 185 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    MicrosoftQuantumIntrinsicH.Apply(target);
#line 194 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicH, queryRegister));
#line 197 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    Uf.Apply((queryRegister, target));
#line 178 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    MicrosoftQuantumCanonApplyToEachA.Adjoint.Apply((MicrosoftQuantumIntrinsicH, queryRegister));
#line 203 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    var resultArray = (IQArray<Result>)MicrosoftQuantumArraysForEach.Apply<IQArray<Result>>((MicrosoftQuantumMeasurementMResetZ, queryRegister));
#line 206 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    MicrosoftQuantumIntrinsicReset.Apply(target);
#line 214 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    return MicrosoftQuantumArraysAll.Apply<Boolean>((MicrosoftQuantumCanonIsResultZero, resultArray));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(queryRegister);
#line hidden
                        Release.Apply(target);
                    }
                }
            }
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.MicrosoftQuantumCanonApplyToEachA = this.Factory.Get<IAdjointable>(typeof(Microsoft.Quantum.Canon.ApplyToEachA<>));
            this.MicrosoftQuantumArraysForEach = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.ForEach<,>));
            this.MicrosoftQuantumMeasurementMResetZ = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Measurement.MResetZ));
            this.MicrosoftQuantumIntrinsicReset = this.Factory.Get<ICallable<Qubit, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Reset));
            this.MicrosoftQuantumArraysAll = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.All<>));
            this.MicrosoftQuantumCanonIsResultZero = this.Factory.Get<ICallable<Result, Boolean>>(typeof(Microsoft.Quantum.Canon.IsResultZero));
        }

        public override IApplyData __dataIn((ICallable,Int64) data) => new In(data);
        public override IApplyData __dataOut(Boolean data) => new QTuple<Boolean>(data);
        public static System.Threading.Tasks.Task<Boolean> Run(IOperationFactory __m__, ICallable Uf, Int64 n)
        {
            return __m__.Run<IsConstantBooleanFunction, (ICallable,Int64), Boolean>((Uf, n));
        }
    }

    [SourceLocation("C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs", OperationFunctor.Body, 223, 255)]
    public partial class _BooleanFunctionFromMarkedElements : Operation<(Int64,IQArray<Int64>,IQArray<Qubit>,Qubit), QVoid>, ICallable
    {
        public _BooleanFunctionFromMarkedElements(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,IQArray<Int64>,IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((Int64,IQArray<Int64>,IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits);
                }
            }
        }

        String ICallable.Name => "_BooleanFunctionFromMarkedElements";
        String ICallable.FullName => "Microsoft.Quantum.Samples.SimpleAlgorithms._BooleanFunctionFromMarkedElements";
        public static OperationInfo<(Int64,IQArray<Int64>,IQArray<Qubit>,Qubit), QVoid> Info => new OperationInfo<(Int64,IQArray<Int64>,IQArray<Qubit>,Qubit), QVoid>(typeof(_BooleanFunctionFromMarkedElements));
        protected ICallable MicrosoftQuantumCanonControlledOnInt
        {
            get;
            set;
        }

        protected IUnitary MicrosoftQuantumCanonApplyToEachCA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        public override Func<(Int64,IQArray<Int64>,IQArray<Qubit>,Qubit), QVoid> Body => (__in__) =>
        {
            var (n,markedElements,query,target) = __in__;
#line 233 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            foreach (var markedElement in markedElements)
#line hidden
            {
#line 237 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                MicrosoftQuantumCanonControlledOnInt.Apply<IUnitary>((markedElement, MicrosoftQuantumCanonApplyToEachCA.Partial(new Func<IQArray<Qubit>, (IUnitary,IQArray<Qubit>)>((__arg1__) => (MicrosoftQuantumIntrinsicX, __arg1__))))).Apply((query, new QArray<Qubit>(target)));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumCanonControlledOnInt = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Canon.ControlledOnInt<>));
            this.MicrosoftQuantumCanonApplyToEachCA = this.Factory.Get<IUnitary>(typeof(Microsoft.Quantum.Canon.ApplyToEachCA<>));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __dataIn((Int64,IQArray<Int64>,IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 n, IQArray<Int64> markedElements, IQArray<Qubit> query, Qubit target)
        {
            return __m__.Run<_BooleanFunctionFromMarkedElements, (Int64,IQArray<Int64>,IQArray<Qubit>,Qubit), QVoid>((n, markedElements, query, target));
        }
    }

    [SourceLocation("C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs", OperationFunctor.Body, 255, 260)]
    public partial class BooleanFunctionFromMarkedElements : Function<(Int64,IQArray<Int64>), ICallable>, ICallable
    {
        public BooleanFunctionFromMarkedElements(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,IQArray<Int64>)>, IApplyData
        {
            public In((Int64,IQArray<Int64>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "BooleanFunctionFromMarkedElements";
        String ICallable.FullName => "Microsoft.Quantum.Samples.SimpleAlgorithms.BooleanFunctionFromMarkedElements";
        public static OperationInfo<(Int64,IQArray<Int64>), ICallable> Info => new OperationInfo<(Int64,IQArray<Int64>), ICallable>(typeof(BooleanFunctionFromMarkedElements));
        protected ICallable<(Int64,IQArray<Int64>,IQArray<Qubit>,Qubit), QVoid> _BooleanFunctionFromMarkedElements
        {
            get;
            set;
        }

        public override Func<(Int64,IQArray<Int64>), ICallable> Body => (__in__) =>
        {
            var (nQubits,markedElements) = __in__;
#line 256 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            return _BooleanFunctionFromMarkedElements.Partial(new Func<(IQArray<Qubit>,Qubit), (Int64,IQArray<Int64>,IQArray<Qubit>,Qubit)>((__arg1__) => (nQubits, markedElements, __arg1__.Item1, __arg1__.Item2)));
        }

        ;
        public override void Init()
        {
            this._BooleanFunctionFromMarkedElements = this.Factory.Get<ICallable<(Int64,IQArray<Int64>,IQArray<Qubit>,Qubit), QVoid>>(typeof(_BooleanFunctionFromMarkedElements));
        }

        public override IApplyData __dataIn((Int64,IQArray<Int64>) data) => new In(data);
        public override IApplyData __dataOut(ICallable data) => new QTuple<ICallable>(data);
        public static System.Threading.Tasks.Task<ICallable> Run(IOperationFactory __m__, Int64 nQubits, IQArray<Int64> markedElements)
        {
            return __m__.Run<BooleanFunctionFromMarkedElements, (Int64,IQArray<Int64>), ICallable>((nQubits, markedElements));
        }
    }

    [SourceLocation("C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs", OperationFunctor.Body, 260, 318)]
    public partial class DeutschJozsaTestCase : Operation<(Int64,IQArray<Int64>), Boolean>, ICallable
    {
        public DeutschJozsaTestCase(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,IQArray<Int64>)>, IApplyData
        {
            public In((Int64,IQArray<Int64>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "DeutschJozsaTestCase";
        String ICallable.FullName => "Microsoft.Quantum.Samples.SimpleAlgorithms.DeutschJozsaTestCase";
        public static OperationInfo<(Int64,IQArray<Int64>), Boolean> Info => new OperationInfo<(Int64,IQArray<Int64>), Boolean>(typeof(DeutschJozsaTestCase));
        protected ICallable<(ICallable,Int64), Boolean> IsConstantBooleanFunction
        {
            get;
            set;
        }

        protected ICallable<(Int64,IQArray<Int64>), ICallable> BooleanFunctionFromMarkedElements
        {
            get;
            set;
        }

        public override Func<(Int64,IQArray<Int64>), Boolean> Body => (__in__) =>
        {
            var (nQubits,markedElements) = __in__;
#line 261 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            return IsConstantBooleanFunction.Apply((BooleanFunctionFromMarkedElements.Apply((nQubits, markedElements)), nQubits));
        }

        ;
        public override void Init()
        {
            this.IsConstantBooleanFunction = this.Factory.Get<ICallable<(ICallable,Int64), Boolean>>(typeof(IsConstantBooleanFunction));
            this.BooleanFunctionFromMarkedElements = this.Factory.Get<ICallable<(Int64,IQArray<Int64>), ICallable>>(typeof(BooleanFunctionFromMarkedElements));
        }

        public override IApplyData __dataIn((Int64,IQArray<Int64>) data) => new In(data);
        public override IApplyData __dataOut(Boolean data) => new QTuple<Boolean>(data);
        public static System.Threading.Tasks.Task<Boolean> Run(IOperationFactory __m__, Int64 nQubits, IQArray<Int64> markedElements)
        {
            return __m__.Run<DeutschJozsaTestCase, (Int64,IQArray<Int64>), Boolean>((nQubits, markedElements));
        }
    }

    [SourceLocation("C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs", OperationFunctor.Body, 318, 377)]
    public partial class HiddenShiftBentCorrelation : Operation<(ICallable,ICallable,Int64), IQArray<Boolean>>, ICallable
    {
        public HiddenShiftBentCorrelation(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(ICallable,ICallable,Int64)>, IApplyData
        {
            public In((ICallable,ICallable,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "HiddenShiftBentCorrelation";
        String ICallable.FullName => "Microsoft.Quantum.Samples.SimpleAlgorithms.HiddenShiftBentCorrelation";
        public static OperationInfo<(ICallable,ICallable,Int64), IQArray<Boolean>> Info => new OperationInfo<(ICallable,ICallable,Int64), IQArray<Boolean>>(typeof(HiddenShiftBentCorrelation));
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumCanonApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected IAdjointable MicrosoftQuantumCanonApplyToEachA
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumArraysForEach
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> MicrosoftQuantumMeasurementMResetZ
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> MicrosoftQuantumIntrinsicMessage
        {
            get;
            set;
        }

        protected ICallable<IQArray<Result>, IQArray<Boolean>> MicrosoftQuantumConvertResultArrayAsBoolArray
        {
            get;
            set;
        }

        public override Func<(ICallable,ICallable,Int64), IQArray<Boolean>> Body => (__in__) =>
        {
            var (Ufstar,Ug,n) = __in__;
#line hidden
            {
#line 321 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                var qubits = Allocate.Apply(n);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 323 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    MicrosoftQuantumCanonApplyToEach.Apply((MicrosoftQuantumIntrinsicH, qubits));
#line 327 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    Ug.Apply(qubits);
#line 331 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    MicrosoftQuantumCanonApplyToEachA.Apply((MicrosoftQuantumIntrinsicH, qubits));
#line 335 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    Ufstar.Apply(qubits);
#line 318 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    MicrosoftQuantumCanonApplyToEachA.Adjoint.Apply((MicrosoftQuantumIntrinsicH, qubits));
#line 341 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    var resultArray = (IQArray<Result>)MicrosoftQuantumArraysForEach.Apply<IQArray<Result>>((MicrosoftQuantumMeasurementMResetZ, qubits));
#line 345 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    MicrosoftQuantumIntrinsicMessage.Apply(String.Format("measured: {0}", resultArray));
#line 346 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    return MicrosoftQuantumConvertResultArrayAsBoolArray.Apply(resultArray);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(qubits);
                    }
                }
            }
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumCanonApplyToEach = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Canon.ApplyToEach<>));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.MicrosoftQuantumCanonApplyToEachA = this.Factory.Get<IAdjointable>(typeof(Microsoft.Quantum.Canon.ApplyToEachA<>));
            this.MicrosoftQuantumArraysForEach = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.ForEach<,>));
            this.MicrosoftQuantumMeasurementMResetZ = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Measurement.MResetZ));
            this.MicrosoftQuantumIntrinsicMessage = this.Factory.Get<ICallable<String, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Message));
            this.MicrosoftQuantumConvertResultArrayAsBoolArray = this.Factory.Get<ICallable<IQArray<Result>, IQArray<Boolean>>>(typeof(Microsoft.Quantum.Convert.ResultArrayAsBoolArray));
        }

        public override IApplyData __dataIn((ICallable,ICallable,Int64) data) => new In(data);
        public override IApplyData __dataOut(IQArray<Boolean> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Boolean>> Run(IOperationFactory __m__, ICallable Ufstar, ICallable Ug, Int64 n)
        {
            return __m__.Run<HiddenShiftBentCorrelation, (ICallable,ICallable,Int64), IQArray<Boolean>>((Ufstar, Ug, n));
        }
    }

    [SourceLocation("C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs", OperationFunctor.Body, 377, 394)]
    public partial class InnerProductBentFunctionImpl : Operation<(Int64,IQArray<Qubit>), QVoid>, ICallable
    {
        public InnerProductBentFunctionImpl(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,IQArray<Qubit>)>, IApplyData
        {
            public In((Int64,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item2)?.Qubits;
                }
            }
        }

        String ICallable.Name => "InnerProductBentFunctionImpl";
        String ICallable.FullName => "Microsoft.Quantum.Samples.SimpleAlgorithms.InnerProductBentFunctionImpl";
        public static OperationInfo<(Int64,IQArray<Qubit>), QVoid> Info => new OperationInfo<(Int64,IQArray<Qubit>), QVoid>(typeof(InnerProductBentFunctionImpl));
        protected ICallable Length
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicZ
        {
            get;
            set;
        }

        public override Func<(Int64,IQArray<Qubit>), QVoid> Body => (__in__) =>
        {
            var (u,qs) = __in__;
#line 379 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            if ((qs.Length != (2L * u)))
            {
#line 380 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                throw new ExecutionFailException("Length of qs must be twice the value of u");
            }

#line 383 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            var xs = (IQArray<Qubit>)qs?.Slice(new QRange(0L, (u - 1L)));
#line 384 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            var ys = (IQArray<Qubit>)qs?.Slice(new QRange(u, ((2L * u) - 1L)));
#line 386 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            foreach (var idx in new QRange(0L, (u - 1L)))
#line hidden
            {
#line 387 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                MicrosoftQuantumIntrinsicZ.Controlled.Apply((new QArray<Qubit>(xs[idx]), ys[idx]));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumIntrinsicZ = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.Z));
        }

        public override IApplyData __dataIn((Int64,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 u, IQArray<Qubit> qs)
        {
            return __m__.Run<InnerProductBentFunctionImpl, (Int64,IQArray<Qubit>), QVoid>((u, qs));
        }
    }

    [SourceLocation("C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs", OperationFunctor.Body, 394, 407)]
    public partial class InnerProductBentFunction : Function<Int64, ICallable>, ICallable
    {
        public InnerProductBentFunction(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "InnerProductBentFunction";
        String ICallable.FullName => "Microsoft.Quantum.Samples.SimpleAlgorithms.InnerProductBentFunction";
        public static OperationInfo<Int64, ICallable> Info => new OperationInfo<Int64, ICallable>(typeof(InnerProductBentFunction));
        protected ICallable<(Int64,IQArray<Qubit>), QVoid> InnerProductBentFunctionImpl
        {
            get;
            set;
        }

        public override Func<Int64, ICallable> Body => (__in__) =>
        {
            var u = __in__;
#line 395 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            return InnerProductBentFunctionImpl.Partial(new Func<IQArray<Qubit>, (Int64,IQArray<Qubit>)>((__arg1__) => (u, __arg1__)));
        }

        ;
        public override void Init()
        {
            this.InnerProductBentFunctionImpl = this.Factory.Get<ICallable<(Int64,IQArray<Qubit>), QVoid>>(typeof(InnerProductBentFunctionImpl));
        }

        public override IApplyData __dataIn(Int64 data) => new QTuple<Int64>(data);
        public override IApplyData __dataOut(ICallable data) => new QTuple<ICallable>(data);
        public static System.Threading.Tasks.Task<ICallable> Run(IOperationFactory __m__, Int64 u)
        {
            return __m__.Run<InnerProductBentFunction, Int64, ICallable>(u);
        }
    }

    [SourceLocation("C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs", OperationFunctor.Body, 407, 432)]
    public partial class _ShiftedInnerProductBentFunction : Operation<(IQArray<Boolean>,Int64,IQArray<Qubit>), QVoid>, ICallable
    {
        public _ShiftedInnerProductBentFunction(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Boolean>,Int64,IQArray<Qubit>)>, IApplyData
        {
            public In((IQArray<Boolean>,Int64,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item3)?.Qubits;
                }
            }
        }

        String ICallable.Name => "_ShiftedInnerProductBentFunction";
        String ICallable.FullName => "Microsoft.Quantum.Samples.SimpleAlgorithms._ShiftedInnerProductBentFunction";
        public static OperationInfo<(IQArray<Boolean>,Int64,IQArray<Qubit>), QVoid> Info => new OperationInfo<(IQArray<Boolean>,Int64,IQArray<Qubit>), QVoid>(typeof(_ShiftedInnerProductBentFunction));
        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumArraysZip
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected ICallable<Int64, ICallable> InnerProductBentFunction
        {
            get;
            set;
        }

        public override Func<(IQArray<Boolean>,Int64,IQArray<Qubit>), QVoid> Body => (__in__) =>
        {
            var (shift,u,qs) = __in__;
#line 408 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            var n = (2L * u);
#line 410 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            if (((shift.Length != n) || (qs.Length != n)))
            {
#line 411 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                throw new ExecutionFailException("Length of shift and qs must be twice the value of u");
            }

#line 416 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            foreach (var (__qsVar0__shiftBit__,__qsVar1__target__) in MicrosoftQuantumArraysZip.Apply<IQArray<(Boolean,Qubit)>>((shift, qs)))
#line hidden
            {
#line 417 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                if (__qsVar0__shiftBit__)
                {
#line 418 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    MicrosoftQuantumIntrinsicX.Apply(__qsVar1__target__);
                }
            }

#line 423 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            InnerProductBentFunction.Apply(u).Apply(qs);
#line 407 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            foreach (var (__qsVar0____qsVar0__shiftBit____,__qsVar1____qsVar1__target____) in MicrosoftQuantumArraysZip.Apply<IQArray<(Boolean,Qubit)>>((shift, qs))?.Slice(new QRange((MicrosoftQuantumArraysZip.Apply<IQArray<(Boolean,Qubit)>>((shift, qs)).Length - 1L), -1L, 0L)))
#line hidden
            {
#line 407 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                if (__qsVar0____qsVar0__shiftBit____)
                {
#line 407 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
                    MicrosoftQuantumIntrinsicX.Adjoint.Apply(__qsVar1____qsVar1__target____);
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumArraysZip = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Zip<,>));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.InnerProductBentFunction = this.Factory.Get<ICallable<Int64, ICallable>>(typeof(InnerProductBentFunction));
        }

        public override IApplyData __dataIn((IQArray<Boolean>,Int64,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Boolean> shift, Int64 u, IQArray<Qubit> qs)
        {
            return __m__.Run<_ShiftedInnerProductBentFunction, (IQArray<Boolean>,Int64,IQArray<Qubit>), QVoid>((shift, u, qs));
        }
    }

    [SourceLocation("C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs", OperationFunctor.Body, 432, 438)]
    public partial class ShiftedInnerProductBentFunction : Function<(IQArray<Boolean>,Int64), ICallable>, ICallable
    {
        public ShiftedInnerProductBentFunction(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Boolean>,Int64)>, IApplyData
        {
            public In((IQArray<Boolean>,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "ShiftedInnerProductBentFunction";
        String ICallable.FullName => "Microsoft.Quantum.Samples.SimpleAlgorithms.ShiftedInnerProductBentFunction";
        public static OperationInfo<(IQArray<Boolean>,Int64), ICallable> Info => new OperationInfo<(IQArray<Boolean>,Int64), ICallable>(typeof(ShiftedInnerProductBentFunction));
        protected ICallable<(IQArray<Boolean>,Int64,IQArray<Qubit>), QVoid> _ShiftedInnerProductBentFunction
        {
            get;
            set;
        }

        public override Func<(IQArray<Boolean>,Int64), ICallable> Body => (__in__) =>
        {
            var (shift,u) = __in__;
#line 433 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            return _ShiftedInnerProductBentFunction.Partial(new Func<IQArray<Qubit>, (IQArray<Boolean>,Int64,IQArray<Qubit>)>((__arg1__) => (shift, u, __arg1__)));
        }

        ;
        public override void Init()
        {
            this._ShiftedInnerProductBentFunction = this.Factory.Get<ICallable<(IQArray<Boolean>,Int64,IQArray<Qubit>), QVoid>>(typeof(_ShiftedInnerProductBentFunction));
        }

        public override IApplyData __dataIn((IQArray<Boolean>,Int64) data) => new In(data);
        public override IApplyData __dataOut(ICallable data) => new QTuple<ICallable>(data);
        public static System.Threading.Tasks.Task<ICallable> Run(IOperationFactory __m__, IQArray<Boolean> shift, Int64 u)
        {
            return __m__.Run<ShiftedInnerProductBentFunction, (IQArray<Boolean>,Int64), ICallable>((shift, u));
        }
    }

    [SourceLocation("C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs", OperationFunctor.Body, 438, -1)]
    public partial class HiddenShiftBentCorrelationTestCase : Operation<(Int64,Int64), Int64>, ICallable
    {
        public HiddenShiftBentCorrelationTestCase(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "HiddenShiftBentCorrelationTestCase";
        String ICallable.FullName => "Microsoft.Quantum.Samples.SimpleAlgorithms.HiddenShiftBentCorrelationTestCase";
        public static OperationInfo<(Int64,Int64), Int64> Info => new OperationInfo<(Int64,Int64), Int64>(typeof(HiddenShiftBentCorrelationTestCase));
        protected ICallable<(Int64,Int64), IQArray<Boolean>> MicrosoftQuantumConvertIntAsBoolArray
        {
            get;
            set;
        }

        protected ICallable<IQArray<Boolean>, Int64> MicrosoftQuantumConvertBoolArrayAsInt
        {
            get;
            set;
        }

        protected ICallable<(ICallable,ICallable,Int64), IQArray<Boolean>> HiddenShiftBentCorrelation
        {
            get;
            set;
        }

        protected ICallable<Int64, ICallable> InnerProductBentFunction
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Boolean>,Int64), ICallable> ShiftedInnerProductBentFunction
        {
            get;
            set;
        }

        public override Func<(Int64,Int64), Int64> Body => (__in__) =>
        {
            var (patternInt,u) = __in__;
#line 439 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            var nQubits = (2L * u);
#line 443 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            var pattern = (IQArray<Boolean>)MicrosoftQuantumConvertIntAsBoolArray.Apply((patternInt, nQubits));
#line 447 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            var result = MicrosoftQuantumConvertBoolArrayAsInt.Apply(HiddenShiftBentCorrelation.Apply((InnerProductBentFunction.Apply(u), ShiftedInnerProductBentFunction.Apply((pattern, u)), nQubits)));
#line 454 "C:/Users/TI/Desktop/Simple_Quantum_Algorithms_Sample/SimpleAlgorithms.qs"
            return result;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumConvertIntAsBoolArray = this.Factory.Get<ICallable<(Int64,Int64), IQArray<Boolean>>>(typeof(Microsoft.Quantum.Convert.IntAsBoolArray));
            this.MicrosoftQuantumConvertBoolArrayAsInt = this.Factory.Get<ICallable<IQArray<Boolean>, Int64>>(typeof(Microsoft.Quantum.Convert.BoolArrayAsInt));
            this.HiddenShiftBentCorrelation = this.Factory.Get<ICallable<(ICallable,ICallable,Int64), IQArray<Boolean>>>(typeof(HiddenShiftBentCorrelation));
            this.InnerProductBentFunction = this.Factory.Get<ICallable<Int64, ICallable>>(typeof(InnerProductBentFunction));
            this.ShiftedInnerProductBentFunction = this.Factory.Get<ICallable<(IQArray<Boolean>,Int64), ICallable>>(typeof(ShiftedInnerProductBentFunction));
        }

        public override IApplyData __dataIn((Int64,Int64) data) => new In(data);
        public override IApplyData __dataOut(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 patternInt, Int64 u)
        {
            return __m__.Run<HiddenShiftBentCorrelationTestCase, (Int64,Int64), Int64>((patternInt, u));
        }
    }
}