//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.CHSHGame\",\"Name\":\"MeasureAliceQubit\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:/Users/TI/Desktop/Validating_Quantum_Mechanics_with_the_CHSH_Game/Game.qs\",\"Position\":{\"Item1\":102,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bit\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":29},\"Item2\":{\"Line\":1,\"Column\":32}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"qubit\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":41},\"Item2\":{\"Line\":1,\"Column\":46}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Bool\"},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"Result\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.CHSHGame\",\"Name\":\"MeasureAliceQubit\"},\"Attributes\":[],\"SourceFile\":\"C:/Users/TI/Desktop/Validating_Quantum_Mechanics_with_the_CHSH_Game/Game.qs\",\"Position\":{\"Item1\":102,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.CHSHGame\",\"Name\":\"MeasureBobQubit\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:/Users/TI/Desktop/Validating_Quantum_Mechanics_with_the_CHSH_Game/Game.qs\",\"Position\":{\"Item1\":112,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bit\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":27},\"Item2\":{\"Line\":1,\"Column\":30}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"qubit\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":39},\"Item2\":{\"Line\":1,\"Column\":44}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Bool\"},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"Result\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.CHSHGame\",\"Name\":\"MeasureBobQubit\"},\"Attributes\":[],\"SourceFile\":\"C:/Users/TI/Desktop/Validating_Quantum_Mechanics_with_the_CHSH_Game/Game.qs\",\"Position\":{\"Item1\":112,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.CHSHGame\",\"Name\":\"PlayQuantumStrategy\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:/Users/TI/Desktop/Validating_Quantum_Mechanics_with_the_CHSH_Game/Game.qs\",\"Position\":{\"Item1\":124,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":30}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"aliceBit\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":17}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bobBit\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":15}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"aliceMeasuresFirst\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":9},\"Item2\":{\"Line\":4,\"Column\":27}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Bool\"},{\"Case\":\"Bool\"},{\"Case\":\"Bool\"}]]},\"ReturnType\":{\"Case\":\"Bool\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.CHSHGame\",\"Name\":\"PlayQuantumStrategy\"},\"Attributes\":[],\"SourceFile\":\"C:/Users/TI/Desktop/Validating_Quantum_Mechanics_with_the_CHSH_Game/Game.qs\",\"Position\":{\"Item1\":124,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":30}},\"Documentation\":[]}")]
#line hidden
namespace Microsoft.Quantum.Samples.CHSHGame
{
    [SourceLocation("C:/Users/TI/Desktop/Validating_Quantum_Mechanics_with_the_CHSH_Game/Game.qs", OperationFunctor.Body, 103, 113)]
    public partial class MeasureAliceQubit : Operation<(Boolean,Qubit), Result>, ICallable
    {
        public MeasureAliceQubit(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Boolean,Qubit)>, IApplyData
        {
            public In((Boolean,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    yield return Data.Item2;
                }
            }
        }

        String ICallable.Name => "MeasureAliceQubit";
        String ICallable.FullName => "Microsoft.Quantum.Samples.CHSHGame.MeasureAliceQubit";
        public static OperationInfo<(Boolean,Qubit), Result> Info => new OperationInfo<(Boolean,Qubit), Result>(typeof(MeasureAliceQubit));
        protected ICallable<Qubit, Result> MicrosoftQuantumMeasurementMResetX
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> MicrosoftQuantumMeasurementMResetZ
        {
            get;
            set;
        }

        public override Func<(Boolean,Qubit), Result> Body => (__in__) =>
        {
            var (bit,qubit) = __in__;
#line 104 "C:/Users/TI/Desktop/Validating_Quantum_Mechanics_with_the_CHSH_Game/Game.qs"
            return (bit ? MicrosoftQuantumMeasurementMResetX : MicrosoftQuantumMeasurementMResetZ).Apply<Result>(qubit);
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumMeasurementMResetX = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Measurement.MResetX));
            this.MicrosoftQuantumMeasurementMResetZ = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Measurement.MResetZ));
        }

        public override IApplyData __dataIn((Boolean,Qubit) data) => new In(data);
        public override IApplyData __dataOut(Result data) => new QTuple<Result>(data);
        public static System.Threading.Tasks.Task<Result> Run(IOperationFactory __m__, Boolean bit, Qubit qubit)
        {
            return __m__.Run<MeasureAliceQubit, (Boolean,Qubit), Result>((bit, qubit));
        }
    }

    [SourceLocation("C:/Users/TI/Desktop/Validating_Quantum_Mechanics_with_the_CHSH_Game/Game.qs", OperationFunctor.Body, 113, 125)]
    public partial class MeasureBobQubit : Operation<(Boolean,Qubit), Result>, ICallable
    {
        public MeasureBobQubit(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Boolean,Qubit)>, IApplyData
        {
            public In((Boolean,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    yield return Data.Item2;
                }
            }
        }

        String ICallable.Name => "MeasureBobQubit";
        String ICallable.FullName => "Microsoft.Quantum.Samples.CHSHGame.MeasureBobQubit";
        public static OperationInfo<(Boolean,Qubit), Result> Info => new OperationInfo<(Boolean,Qubit), Result>(typeof(MeasureBobQubit));
        protected IUnitary<(Double,Qubit)> MicrosoftQuantumIntrinsicRy
        {
            get;
            set;
        }

        protected ICallable<QVoid, Double> MicrosoftQuantumMathPI
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> MicrosoftQuantumMeasurementMResetZ
        {
            get;
            set;
        }

        public override Func<(Boolean,Qubit), Result> Body => (__in__) =>
        {
            var (bit,qubit) = __in__;
#line 114 "C:/Users/TI/Desktop/Validating_Quantum_Mechanics_with_the_CHSH_Game/Game.qs"
            MicrosoftQuantumIntrinsicRy.Apply(((bit ? ((2D * MicrosoftQuantumMathPI.Apply(QVoid.Instance)) / 8D) : ((-(2D) * MicrosoftQuantumMathPI.Apply(QVoid.Instance)) / 8D)), qubit));
#line 122 "C:/Users/TI/Desktop/Validating_Quantum_Mechanics_with_the_CHSH_Game/Game.qs"
            return MicrosoftQuantumMeasurementMResetZ.Apply(qubit);
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumIntrinsicRy = this.Factory.Get<IUnitary<(Double,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.Ry));
            this.MicrosoftQuantumMathPI = this.Factory.Get<ICallable<QVoid, Double>>(typeof(Microsoft.Quantum.Math.PI));
            this.MicrosoftQuantumMeasurementMResetZ = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Measurement.MResetZ));
        }

        public override IApplyData __dataIn((Boolean,Qubit) data) => new In(data);
        public override IApplyData __dataOut(Result data) => new QTuple<Result>(data);
        public static System.Threading.Tasks.Task<Result> Run(IOperationFactory __m__, Boolean bit, Qubit qubit)
        {
            return __m__.Run<MeasureBobQubit, (Boolean,Qubit), Result>((bit, qubit));
        }
    }

    [SourceLocation("C:/Users/TI/Desktop/Validating_Quantum_Mechanics_with_the_CHSH_Game/Game.qs", OperationFunctor.Body, 125, -1)]
    public partial class PlayQuantumStrategy : Operation<(Boolean,Boolean,Boolean), Boolean>, ICallable
    {
        public PlayQuantumStrategy(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Boolean,Boolean,Boolean)>, IApplyData
        {
            public In((Boolean,Boolean,Boolean) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "PlayQuantumStrategy";
        String ICallable.FullName => "Microsoft.Quantum.Samples.CHSHGame.PlayQuantumStrategy";
        public static OperationInfo<(Boolean,Boolean,Boolean), Boolean> Info => new OperationInfo<(Boolean,Boolean,Boolean), Boolean>(typeof(PlayQuantumStrategy));
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        protected ICallable<(Boolean,Qubit), Result> MeasureAliceQubit
        {
            get;
            set;
        }

        protected ICallable<(Boolean,Qubit), Result> MeasureBobQubit
        {
            get;
            set;
        }

        public override Func<(Boolean,Boolean,Boolean), Boolean> Body => (__in__) =>
        {
            var (aliceBit,bobBit,aliceMeasuresFirst) = __in__;
#line hidden
            {
#line 132 "C:/Users/TI/Desktop/Validating_Quantum_Mechanics_with_the_CHSH_Game/Game.qs"
                var (aliceQubit,bobQubit) = (Allocate.Apply(), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 134 "C:/Users/TI/Desktop/Validating_Quantum_Mechanics_with_the_CHSH_Game/Game.qs"
                    MicrosoftQuantumIntrinsicH.Apply(aliceQubit);
#line 135 "C:/Users/TI/Desktop/Validating_Quantum_Mechanics_with_the_CHSH_Game/Game.qs"
                    MicrosoftQuantumIntrinsicCNOT.Apply((aliceQubit, bobQubit));
#line 138 "C:/Users/TI/Desktop/Validating_Quantum_Mechanics_with_the_CHSH_Game/Game.qs"
                    if (aliceMeasuresFirst)
                    {
#line 139 "C:/Users/TI/Desktop/Validating_Quantum_Mechanics_with_the_CHSH_Game/Game.qs"
                        return (MeasureAliceQubit.Apply((aliceBit, aliceQubit)) == MeasureBobQubit.Apply((bobBit, bobQubit)));
                    }
                    else
                    {
#line 141 "C:/Users/TI/Desktop/Validating_Quantum_Mechanics_with_the_CHSH_Game/Game.qs"
                        return (MeasureBobQubit.Apply((bobBit, bobQubit)) == MeasureAliceQubit.Apply((aliceBit, aliceQubit)));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(aliceQubit);
#line hidden
                        Release.Apply(bobQubit);
                    }
                }
            }
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
            this.MeasureAliceQubit = this.Factory.Get<ICallable<(Boolean,Qubit), Result>>(typeof(MeasureAliceQubit));
            this.MeasureBobQubit = this.Factory.Get<ICallable<(Boolean,Qubit), Result>>(typeof(MeasureBobQubit));
        }

        public override IApplyData __dataIn((Boolean,Boolean,Boolean) data) => new In(data);
        public override IApplyData __dataOut(Boolean data) => new QTuple<Boolean>(data);
        public static System.Threading.Tasks.Task<Boolean> Run(IOperationFactory __m__, Boolean aliceBit, Boolean bobBit, Boolean aliceMeasuresFirst)
        {
            return __m__.Run<PlayQuantumStrategy, (Boolean,Boolean,Boolean), Boolean>((aliceBit, bobBit, aliceMeasuresFirst));
        }
    }
}