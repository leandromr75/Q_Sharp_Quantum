//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.Teleportation\",\"Name\":\"Teleport\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs\",\"Position\":{\"Item1\":36,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":19}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"msg\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":21},\"Item2\":{\"Line\":1,\"Column\":24}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":34},\"Item2\":{\"Line\":1,\"Column\":40}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Sends the state of one qubit to a target qubit by using\",\" teleportation.\",\"\",\" Notice that after calling Teleport, the state of `msg` is\",\" collapsed.\",\"\",\" # Input\",\" ## msg\",\" A qubit whose state we wish to send.\",\" ## target\",\" A qubit initially in the |0〉 state that we want to send\",\" the state of msg to.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.Teleportation\",\"Name\":\"Teleport\"},\"Attributes\":[],\"SourceFile\":\"C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs\",\"Position\":{\"Item1\":36,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.Teleportation\",\"Name\":\"TeleportClassicalMessage\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs\",\"Position\":{\"Item1\":77,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"message\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":37},\"Item2\":{\"Line\":1,\"Column\":44}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Bool\"},\"ReturnType\":{\"Case\":\"Bool\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Uses teleportation to send a classical message from one qubit\",\" to another.\",\"\",\" # Input\",\" ## message\",\" If `true`, the source qubit (`here`) is prepared in the\",\" |1〉 state, otherwise the source qubit is prepared in |0〉.\",\"\",\" ## Output\",\" The result of a Z-basis measurement on the teleported qubit,\",\" represented as a Bool.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.Teleportation\",\"Name\":\"TeleportClassicalMessage\"},\"Attributes\":[],\"SourceFile\":\"C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs\",\"Position\":{\"Item1\":77,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.Teleportation\",\"Name\":\"TeleportRandomMessage\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs\",\"Position\":{\"Item1\":102,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Uses teleportation to send a randomly picked |-> or |+> state\",\" to another.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.Teleportation\",\"Name\":\"TeleportRandomMessage\"},\"Attributes\":[],\"SourceFile\":\"C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs\",\"Position\":{\"Item1\":102,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"Documentation\":[]}")]
#line hidden
namespace Microsoft.Quantum.Samples.Teleportation
{
    [SourceLocation("C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs", OperationFunctor.Body, 37, 78)]
    public partial class Teleport : Operation<(Qubit,Qubit), QVoid>, ICallable
    {
        public Teleport(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Qubit,Qubit)>, IApplyData
        {
            public In((Qubit,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    yield return Data.Item1;
                    yield return Data.Item2;
                }
            }
        }

        String ICallable.Name => "Teleport";
        String ICallable.FullName => "Microsoft.Quantum.Samples.Teleportation.Teleport";
        public static OperationInfo<(Qubit,Qubit), QVoid> Info => new OperationInfo<(Qubit,Qubit), QVoid>(typeof(Teleport));
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> MicrosoftQuantumMeasurementMResetZ
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicZ
        {
            get;
            set;
        }

        protected ICallable<Result, Boolean> MicrosoftQuantumCanonIsResultOne
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        public override Func<(Qubit,Qubit), QVoid> Body => (__in__) =>
        {
            var (msg,target) = __in__;
#line hidden
            {
#line 38 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                var register = Allocate.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 40 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                    MicrosoftQuantumIntrinsicH.Apply(register);
#line 41 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                    MicrosoftQuantumIntrinsicCNOT.Apply((register, target));
#line 44 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                    MicrosoftQuantumIntrinsicCNOT.Apply((msg, register));
#line 45 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                    MicrosoftQuantumIntrinsicH.Apply(msg);
#line 52 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                    if ((MicrosoftQuantumMeasurementMResetZ.Apply(msg) == Result.One))
                    {
#line 52 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                        MicrosoftQuantumIntrinsicZ.Apply(target);
                    }

#line 57 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                    if (MicrosoftQuantumCanonIsResultOne.Apply(MicrosoftQuantumMeasurementMResetZ.Apply(register)))
                    {
#line 57 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                        MicrosoftQuantumIntrinsicX.Apply(target);
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(register);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
            this.MicrosoftQuantumMeasurementMResetZ = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Measurement.MResetZ));
            this.MicrosoftQuantumIntrinsicZ = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.Z));
            this.MicrosoftQuantumCanonIsResultOne = this.Factory.Get<ICallable<Result, Boolean>>(typeof(Microsoft.Quantum.Canon.IsResultOne));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __dataIn((Qubit,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit msg, Qubit target)
        {
            return __m__.Run<Teleport, (Qubit,Qubit), QVoid>((msg, target));
        }
    }

    [SourceLocation("C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs", OperationFunctor.Body, 78, 103)]
    public partial class TeleportClassicalMessage : Operation<Boolean, Boolean>, ICallable
    {
        public TeleportClassicalMessage(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "TeleportClassicalMessage";
        String ICallable.FullName => "Microsoft.Quantum.Samples.Teleportation.TeleportClassicalMessage";
        public static OperationInfo<Boolean, Boolean> Info => new OperationInfo<Boolean, Boolean>(typeof(TeleportClassicalMessage));
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected ICallable<(Qubit,Qubit), QVoid> Teleport
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> MicrosoftQuantumMeasurementMResetZ
        {
            get;
            set;
        }

        public override Func<Boolean, Boolean> Body => (__in__) =>
        {
            var message = __in__;
#line hidden
            {
#line 80 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                var (msg,target) = (Allocate.Apply(), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 83 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                    if (message)
                    {
#line 84 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                        MicrosoftQuantumIntrinsicX.Apply(msg);
                    }

#line 88 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                    Teleport.Apply((msg, target));
#line 91 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                    return (MicrosoftQuantumMeasurementMResetZ.Apply(target) == Result.One);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(msg);
#line hidden
                        Release.Apply(target);
                    }
                }
            }
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.Teleport = this.Factory.Get<ICallable<(Qubit,Qubit), QVoid>>(typeof(Teleport));
            this.MicrosoftQuantumMeasurementMResetZ = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Measurement.MResetZ));
        }

        public override IApplyData __dataIn(Boolean data) => new QTuple<Boolean>(data);
        public override IApplyData __dataOut(Boolean data) => new QTuple<Boolean>(data);
        public static System.Threading.Tasks.Task<Boolean> Run(IOperationFactory __m__, Boolean message)
        {
            return __m__.Run<TeleportClassicalMessage, Boolean, Boolean>(message);
        }
    }

    [SourceLocation("C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs", OperationFunctor.Body, 103, -1)]
    public partial class TeleportRandomMessage : Operation<QVoid, QVoid>, ICallable
    {
        public TeleportRandomMessage(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "TeleportRandomMessage";
        String ICallable.FullName => "Microsoft.Quantum.Samples.Teleportation.TeleportRandomMessage";
        public static OperationInfo<QVoid, QVoid> Info => new OperationInfo<QVoid, QVoid>(typeof(TeleportRandomMessage));
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> PrepareRandomMessage
        {
            get;
            set;
        }

        protected ICallable<(Qubit,Qubit), QVoid> Teleport
        {
            get;
            set;
        }

        protected ICallable<Qubit, Boolean> IsPlus
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> MicrosoftQuantumIntrinsicMessage
        {
            get;
            set;
        }

        protected ICallable<Qubit, Boolean> IsMinus
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> MicrosoftQuantumIntrinsicReset
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> Body => (__in__) =>
        {
#line hidden
            {
#line 105 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                var (msg,target) = (Allocate.Apply(), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 106 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                    PrepareRandomMessage.Apply(msg);
#line 109 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                    Teleport.Apply((msg, target));
#line 112 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                    if (IsPlus.Apply(target))
                    {
#line 112 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                        MicrosoftQuantumIntrinsicMessage.Apply("Received |+>");
                    }

#line 113 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                    if (IsMinus.Apply(target))
                    {
#line 113 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                        MicrosoftQuantumIntrinsicMessage.Apply("Received |->");
                    }

#line 117 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                    MicrosoftQuantumIntrinsicReset.Apply(msg);
#line 118 "C:/Users/TI/Desktop/Quantum_Teleportation_Sample/TeleportationSample.qs"
                    MicrosoftQuantumIntrinsicReset.Apply(target);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(msg);
#line hidden
                        Release.Apply(target);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.PrepareRandomMessage = this.Factory.Get<ICallable<Qubit, QVoid>>(typeof(PrepareRandomMessage));
            this.Teleport = this.Factory.Get<ICallable<(Qubit,Qubit), QVoid>>(typeof(Teleport));
            this.IsPlus = this.Factory.Get<ICallable<Qubit, Boolean>>(typeof(IsPlus));
            this.MicrosoftQuantumIntrinsicMessage = this.Factory.Get<ICallable<String, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Message));
            this.IsMinus = this.Factory.Get<ICallable<Qubit, Boolean>>(typeof(IsMinus));
            this.MicrosoftQuantumIntrinsicReset = this.Factory.Get<ICallable<Qubit, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Reset));
        }

        public override IApplyData __dataIn(QVoid data) => data;
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<TeleportRandomMessage, QVoid, QVoid>(QVoid.Instance);
        }
    }
}